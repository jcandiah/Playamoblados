@using Microsoft.AspNet.Identity;
@using Microsoft.AspNet.Identity.Owin;
@using Microsoft.Owin.Security;
@model BeYourMarket.Web.Models.ListingItemModel
@{
    ViewBag.Title = "ListingCalendar";
    var focus = false;
    if(Session["focus"] !=null)
    {
        focus = true;
        Session["focus"] = null;
    }
}

<link href="~/calendar-master/css/jquery.e-calendar.css" rel="stylesheet" />
<script src="~/calendar-master/example/index.js"></script>
<script src="~/js/timepicker/bootstrap-datepicker.js"></script>
<link href="~/js/timepicker/bootstrap-datepicker.min.css" rel="stylesheet" />

<div>
    <script type="text/javascript">


        (function ($) {

            var eCalendar = function (options, object) {
                // Initializing global variables
                var adDay = new Date().getDate();
                var adMonth = new Date().getMonth();
                var adYear = new Date().getFullYear();
                var dDay = adDay;
                var dMonth = adMonth;
                var dYear = adYear;
                var instance = object;

                var settings = $.extend({}, $.fn.eCalendar.defaults, options);

                function lpad(value, length, pad) {
                    if (typeof pad == 'undefined') {
                        pad = '0';
                    }
                    var p;
                    for (var i = 0; i < length; i++) {
                        p += pad;
                    }
                    return (p + value).slice(-length);
                }

                var mouseOver = function () {
                    $(this).addClass('c-nav-btn-over');
                };
                var mouseLeave = function () {
                    $(this).removeClass('c-nav-btn-over');
                };
                var mouseOverEvent = function () {
                    $(this).addClass('c-event-over');
                    var d = $(this).attr('data-event-day');
                    $('div.c-event-item[data-event-day="' + d + '"]').addClass('c-event-over');
                };
                var mouseLeaveEvent = function () {
                    $(this).removeClass('c-event-over')
                    var d = $(this).attr('data-event-day');
                    $('div.c-event-item[data-event-day="' + d + '"]').removeClass('c-event-over');
                };
                var mouseOverItem = function () {
                    $(this).addClass('c-event-over');
                    var d = $(this).attr('data-event-day');
                    $('div.c-event[data-event-day="' + d + '"]').addClass('c-event-over');
                };
                var mouseLeaveItem = function () {
                    $(this).removeClass('c-event-over')
                    var d = $(this).attr('data-event-day');
                    $('div.c-event[data-event-day="' + d + '"]').removeClass('c-event-over');
                };
                var nextMonth = function () {
                    if (dMonth < 11) {
                        dMonth++;
                    } else {
                        dMonth = 0;
                        dYear++;
                    }
                    print();
                };
                var previousMonth = function () {
                    if (dMonth > 0) {
                        dMonth--;
                    } else {
                        dMonth = 11;
                        dYear--;
                    }
                    print();
                };

                function loadEvents() {
                    if (typeof settings.url != 'undefined' && settings.url != '') {
                        $.ajax({
                            url: settings.url,
                            async: false,
                            success: function (result) {
                                settings.events = result;
                            }
                        });
                    }
                }

                function print() {
                    loadEvents();
                    var dWeekDayOfMonthStart = new Date(dYear, dMonth, 1).getDay() - settings.firstDayOfWeek;

                    if (dWeekDayOfMonthStart < 0) {
                        dWeekDayOfMonthStart = 6 - ((dWeekDayOfMonthStart + 1) * -1);

                    }
                    var dLastDayOfMonth = new Date(dYear, dMonth + 1, 0).getDate();
                    var dLastDayOfPreviousMonth = new Date(dYear, dMonth + 1, 0).getDate() - dWeekDayOfMonthStart + 1;



                    var cBody = $('<div/>').addClass('c-grid');
                    var cEvents = $('<div/>').addClass('c-event-grid');
                    var cEventsBody = $('<div/>').addClass('c-event-body');
                    cEvents.append($('<div/>').addClass('c-event-title c-pad-top').html(settings.eventTitle));
                    cEvents.append(cEventsBody);
                    var cNext = $('<div/>').addClass('c-next c-grid-title c-pad-top');
                    var cMonth = $('<div/>').addClass('c-month c-grid-title c-pad-top');
                    var cPrevious = $('<div/>').addClass('c-previous c-grid-title c-pad-top');
                    cPrevious.html(settings.textArrows.previous);
                    cMonth.html(settings.months[dMonth] + ' ' + dYear);
                    cNext.html(settings.textArrows.next);

                    cPrevious.on('mouseover', mouseOver).on('mouseleave', mouseLeave).on('click', previousMonth);
                    cNext.on('mouseover', mouseOver).on('mouseleave', mouseLeave).on('click', nextMonth);

                    cBody.append(cPrevious);
                    cBody.append(cMonth);
                    cBody.append(cNext);
                    var dayOfWeek = settings.firstDayOfWeek;
                    for (var i = 0; i < 7; i++) {
                        if (dayOfWeek > 6) {
                            dayOfWeek = 0;
                        }
                        var cWeekDay = $('<div/>').addClass('c-week-day c-pad-top');
                        cWeekDay.html(settings.weekDays[dayOfWeek]);
                        cBody.append(cWeekDay);
                        dayOfWeek++;
                    }
                    var day = 1;
                    var dayOfNextMonth = 1;
                    for (var i = 0; i < 42; i++) {
                        var cDay = $('<div/>');

                        if (i < dWeekDayOfMonthStart) {

                            cDay.addClass('c-day-previous-month c-pad-top');
                            cDay.html("");
                        } else if (day <= dLastDayOfMonth) {
                            cDay.addClass('c-day c-pad-top');
                            if (day == dDay && adMonth == dMonth && adYear == dYear) {
                                cDay.addClass('c-today');
                            }


                            //aca pinta el calendario de los eventos pasajero
                            for (var j = 0; j < settings.events.length; j++) {
                                var d = settings.events[j].datetime;
                                if (d.getDate() == day && d.getMonth() == dMonth && d.getFullYear() == dYear) {

                                    cDay.addClass('c-event-pasajero').attr('data-event-day', d.getDate());
                                    cDay.on('mouseover', mouseOverEvent).on('mouseleave', mouseLeaveEvent);
                                }
                            }

                            //truco pinta calendario para reserva
                            for (var j = 0; j < settings.datedisabled.length; j++) {
                                var d = settings.datedisabled[j].datetime;
                                if (d.getDate() == day && d.getMonth() == dMonth && d.getFullYear() == dYear) {

                                    cDay.addClass('c-event-reserva').attr('data-event-day', d.getDate());
                                    cDay.on('mouseover', mouseOverEvent).on('mouseleave', mouseLeaveEvent);
                                }
                            }

                            //pinta calendario para bloqueo playamoblados
                            for (var j = 0; j < settings.bloqueo.length; j++) {
                                var d = settings.bloqueo[j].datetime;
                                if (d.getDate() == day && d.getMonth() == dMonth && d.getFullYear() == dYear) {
                                    cDay.addClass('c-event-bloqueo').attr('data-event-day', d.getDate());
                                    cDay.on('mouseover', mouseOverEvent).on('mouseleave', mouseLeaveEvent);
                                }
                            }



                            cDay.html(day++);
                        } else {
                            cDay.addClass('c-day-next-month c-pad-top');
                            cDay.html("");
                        }
                        cBody.append(cDay);
                    }

                    //ACA CARGA LOS EVENTOS PASAJERO
                    var eventList = $('<div/>').addClass('c-event-list');
                    var tituloComparar;
                    for (var i = 0; i < settings.events.length; i++) {

                        var d = settings.events[i].datetime;

                        if (d.getMonth() == dMonth && d.getFullYear() == dYear) {
                            var date = lpad(d.getDate(), 2) + '/' + lpad(d.getMonth() + 1, 2);
                            var item = $('<div/>').addClass('c-event-item');
                            var title = $('<div/>').addClass('title').html(date + '  ' + settings.events[i].title + '<br/>');
                            var description = $('<div/>').addClass('description').html(settings.events[i].description + '<br/>');
                            item.attr('data-event-day', d.getDate());
                            item.on('mouseover', mouseOverItem).on('mouseleave', mouseLeaveItem);
                            item.append(title).append(description);
                            //if (settings.events.length > i+1)
                            //{
                            //    if (tituloComparar != settings.events[i].title)
                            //{
                            eventList.append(item);
                            //    }
                            //}
                            tituloComparar = settings.events[i].title;
                        }

                    }
                    //$(instance).addClass('calendar');
                    //cEventsBody.append(eventList);
                    //$(instance).html(cBody).append(cEvents);
                    //fin CARGA EVENTOS PASAJERO



                    //ACA CARGA LOS EVENTOS Bloqueo reserva
                    //var eventList2 = $('<div/>').addClass('c-event-list');
                    //var tituloComparar;
                    //for (var i = 0; i < settings.datedisabled.length; i++) {

                    //    var d = settings.datedisabled[i].datetime;

                    //    if (d.getMonth() == dMonth && d.getFullYear() == dYear) {
                    //        var date = lpad(d.getDate(), 2) + '/' + lpad(d.getMonth() + 1, 2);
                    //        var item = $('<div/>').addClass('c-event-item');
                    //        var title = $('<div/>').addClass('title').html(date + '  ' + settings.datedisabled[i].title + '<br/>');
                    //        var description = $('<div/>').addClass('description').html(settings.datedisabled[i].description + '<br/>');
                    //        item.attr('data-event-day', d.getDate());
                    //        item.on('mouseover', mouseOverItem).on('mouseleave', mouseLeaveItem);
                    //        item.append(title).append(description);
                    //        if (settings.events.length > i+1)
                    //        {
                    //            if (tituloComparar != settings.events[i].title)
                    //        {
                    //        eventList.append(item);
                    //            }
                    //        }
                    //        tituloComparar = settings.datedisabled[i].title;
                    //    }

                    //}
                    $(instance).addClass('calendar');
                    cEventsBody.append(eventList);
                    //cEventsBody.append(eventList2);
                    $(instance).html(cBody).append(cEvents);
                    //fin CARGA EVENTOS PASAJERO

                }

                return print();
            }

            $.fn.eCalendar = function (oInit) {
                return this.each(function () {
                    return eCalendar(oInit, $(this));
                });
            };

            // plugin defaults
            $.fn.eCalendar.defaults = {
                weekDays: ['Dom', 'Lun', 'Mar', 'Mi', 'Jue', 'Vie', 'Sab'],
                months: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],

                textArrows: { previous: '<', next: '>' },
                eventTitle: 'Eventos',
                @*url: '@Url.Action("GetEvents", "Manage")',*@
                url: '',
                bloqueo: [
                                @{
                                    var datesDisabledbloqueo = new System.Text.StringBuilder();
            foreach (var orders in Model.ListOrder.Where(x=>x.OrderType==1 && x.Status != 3))
            {
                                        for (DateTime date = orders.FromDate.Value; date < orders.ToDate.Value; date = date.Date.AddDays(1))
                                        {
                                                string valor = string.Format("title:'Bloqueo', description: 'Playamoblados', datetime: new Date({0},{1},{2}),",date.Year, date.Month - 1, date.Day);
                                                @Html.Raw("{" + valor.ToString() + "},");
                                    }
            }
        }],

                datedisabled: [
                                    @{

                                        foreach (var orders in Model.ListOrder.Where(x=>x.OrderType==2 && x.Status != 3))
                                        {
                                            for (DateTime date = orders.FromDate.Value; date < orders.ToDate.Value; date = date.Date.AddDays(1))
                                            {
                                                string valor = string.Format("title:'Bloqueo', description: '', datetime: new Date({0},{1},{2}),",date.Year, date.Month - 1, date.Day);
                                                @Html.Raw("{" + valor.ToString() + "},");
                                            }
                                        }

        }

                ],


                events: [
                   @{
                       // 1 = bloqueo playamoblado
                       // 2 = bloqueo
                       // 3 = reserva
                       var userCurrent = User.Identity.User();


                       if (User.IsInRole("Administrator"))
                       {
                           foreach (var orders in Model.ListOrder.Where(x => x.OrderType == 3 && x.Status != 3))
                           {

                               var usuario = Model.ListUsers.First(x => x.Id.Equals(orders.UserReceiver));

                               if (orders.Status == 1)
                               {

                                   for (DateTime date = orders.FromDate.Value; date < orders.ToDate.Value; date = date.Date.AddDays(1))
                                   {
                                       string valor = string.Format("title:'{0}', description: '[[[Email Contact: ]]] {1} <br> [[[Status]]] : <strong>{2}</strong>', datetime: new Date({3},{4},{5}),", usuario.FullName, usuario.Email,"Pendiente", date.Year, date.Month - 1, date.Day);
                                       @Html.Raw("{" + valor.ToString() + "},");
                                   }
                               }
                               if(orders.Status==2)
                               {
                                   for (DateTime date = orders.FromDate.Value; date < orders.ToDate.Value; date = date.Date.AddDays(1))
                                   {
                                       string valor = string.Format("title:'{0}', description: '[[[Email Contact: ]]] {1} <br> [[[Status]]] : <strong>{2}</strong>', datetime: new Date({3},{4},{5}),", usuario.FullName, usuario.Email, "Pendiente de pago!", date.Year, date.Month - 1, date.Day);
                                       @Html.Raw("{" + valor.ToString() + "},");
                                   }
                               }
                                 if(orders.Status==4)
                               {
                                   for (DateTime date = orders.FromDate.Value; date < orders.ToDate.Value; date = date.Date.AddDays(1))
                                   {
                                       string valor = string.Format("title:'{0}', description: '[[[Email Contact: ]]] {1} <br> [[[Status]]] : <strong>{2}</strong>', datetime: new Date({3},{4},{5}),", usuario.FullName, usuario.Email, "Confirmado!", date.Year, date.Month - 1, date.Day);
                                       @Html.Raw("{" + valor.ToString() + "},");
                                   }
                               }
                           }
                       }
                       if(User.IsInRole("Owner"))
                       {
                           foreach (var orders in Model.ListOrder.Where(x => x.OrderType == 3 && x.Status != 3))
                           {
                               for (DateTime date = orders.FromDate.Value; date < orders.ToDate.Value; date = date.Date.AddDays(1))
                               {
                                   string valor = string.Format("title:'Reserva', description: '', datetime: new Date({0},{1},{2}),",date.Year, date.Month - 1, date.Day);
                                  @Html.Raw("{" + valor.ToString() + "},");
                                   }
                               }
                           }
                       }
                ],
                firstDayOfWeek: 1,

            };
        }(jQuery));

    </script>
</div>


<style>
    .color-swatch {
    float: left;
    width: 40px;
    height: 40px;
    margin: 0 5px;
    border-radius: 3px;
}
</style>

@helper DisplayUnlockLink(int id)
    {
    <a class="btn btn-warning btn-sm" href="javascript:void(0);" onclick="confirmUnlock('@id');"><i class="fa fa-key"></i> [[[Unlock]]]</a>
}

<div class="body-content container-fluid">
    <div class="main-section row">
        <div class="container-fluid mrg-tb">

            @Html.Partial("_DashBoardSide", "calendar")

            <div class="col-md-9 text-center" style="padding-bottom:4%;">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                       Propiedad ID : # @Model.ListingCurrent.Title <span class="fa fa-calendar"></span>
                    </div>
                    <div class="panel-body text-center">
                        <div class="table-responsive">
                            <div id="calendar"></div>
                            <br />
                        </div>
                    </div>
                 </div>              
                <br />
                <div class="alert alert-info">
                    Lost <strong>Eventos</strong> se mostraran cuando es reservado por un pasajero.
                </div>
            </div>
           
         
            <div class="col-md-offset-5 col-md-5 col-sm-9 col-xs-12">
                @Html.Partial("_UserMessage")
                <h2>Bloquea tu propiedad</h2>
                <br />
                @Html.Partial("~/Views/Listing/_ListingPayment2.cshtml", Model.ListingCurrent)
            </div>

            <div class="row">
                <div class="col-md-offset-3 col-md-9 col-sm-9 col-xs-12">
                    <h3>[[[Unlock Orders]]]</h3>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <tr class="bg-warning">
                                <th>
                                    #
                                </th>
                                <th>
                                    [[[Check in]]]
                                </th>
                                <th>
                                    [[[Check out]]]
                                </th>
                                <th>[[[Unlock]]]</th>
                            </tr>
                            @{ int cont = 0;}
                            @foreach (var item in Model.ListOrder.Where(x => x.OrderType == 2 && x.ToDate.Value > DateTime.Now && x.Status!=3))
                            {
                                cont++;
                                <tr>
                                    <td>
                                        @cont
                                    </td>
                                    <td>
                                        @item.FromDate.Value.ToShortDateString()
                                    </td>
                                    <td>
                                        @item.ToDate.Value.ToShortDateString()
                                    </td>

                                    <td>
                                        @DisplayUnlockLink(item.ID)
                                    </td>
                                </tr>
                            }

                        </table>
                    </div>
                </div>
            </div>



        </div>

            </div>
        </div>

@section Scripts {
    <script type="text/javascript">
        function confirmUnlock(id) {
            swal({
                title: "[[[Are you sure?]]]",
                text: "[[[You will delete the order]]] ",
                type: "input",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "[[[Yes, delete it!]]]",
                cancelButtonText: "[[[No, cancel please!]]]",
                inputPlaceholder: "[[[Type UNLOCK to confirm delete]]]",
                closeOnConfirm: false,
                closeOnCancel: true
            }, function (inputValue) {

                if (inputValue === false)
                    return false;
                if (inputValue === "" || inputValue != "UNLOCK") {
                    swal.showInputError("[[[Type UNLOCK to confirm unlock]]]"); return false
                }

                swal.disableButtons();

                post('@Url.Action("Unlock","Manage")', { id: id });

                swal("Unlock!", "[[[The order is unlock.]]]", "success");
            });
        }
    </script>

}
@{
    var datesDisabled = new System.Text.StringBuilder();
    foreach (var fromDate in Model.DatesBooked)
    {
        datesDisabled.AppendFormat("'{0}',", fromDate.ToShortDateString());
    }
}
@Html.Partial("_LocalizationDatePicker")

@Html.Partial("_LocalizationJQueryValidation")


<script type="text/javascript">
        $(document).ready(function () {
            $('.datepicker').datepicker({
                startDate: new Date(),
                defaultDate: new Date(),
                //daysOfWeekDisabled: "0",
                datesDisabled: [@Html.Raw(datesDisabled.ToString())],
                language: '@Context.GetPrincipalAppLanguageForRequest().ToString()'
            });

           @if (focus)
           {
              @Html.Raw("$('#FromDate').focus();");

           }

           });
</script>













