@using Microsoft.Practices.Unity;
@using Microsoft.Practices.Unity.Configuration;
@using Microsoft.AspNet.Identity
@using System.Net;
@using System.Web.Script.Serialization;
@using System.Collections.Generic;

@model BeYourMarket.Web.Models.PaymentModel

@section Styles{
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
}

@{
	ViewBag.Title = "ConfirmOrder";
	var pasajeros = Model.ListingOrder.Adults.Value + Model.ListingOrder.Children.Value;
	var servicio = (Model.ListingOrder.Price) * 0.04;
	var total = Model.ListingOrder.Total;

	//string apiUrl = "http://www.mindicador.cl/api";
	//string jsonString = "{}";
	//WebClient http = new WebClient();
	//JavaScriptSerializer jss = new JavaScriptSerializer();

	//http.Headers.Add(HttpRequestHeader.Accept, "application/json");
	//jsonString = http.DownloadString(apiUrl);
	//var indicatorsObject = jss.Deserialize<Dictionary<string, object>>(jsonString);

	//Dictionary<string, Dictionary<string, string>> dailyIndicators = new Dictionary<string, Dictionary<string, string>>();

	//int i = 0;
	//foreach (var key in indicatorsObject.Keys.ToArray())
	//{
	//	var item = indicatorsObject[key];

	//	if (item.GetType().FullName.Contains("System.Collections.Generic.Dictionary"))
	//	{
	//		Dictionary<string, object> itemObject = (Dictionary<string, object>)item;
	//		Dictionary<string, string> indicatorProp = new Dictionary<string, string>();

	//		int j = 0;
	//		foreach (var key2 in itemObject.Keys.ToArray())
	//		{
	//			indicatorProp.Add(key2, itemObject[key2].ToString());
	//			j++;
	//		}

	//		dailyIndicators.Add(key, indicatorProp);
	//	}
	//	i++;
	//}

	//var stringdolar = dailyIndicators["dolar"]["valor"];
	//double dolar = 0;
	//double.TryParse(stringdolar, out dolar);
	//var cuenta = stringdolar.Length;
	//var totalDolar = total / dolar;
	//totalDolar = Math.Round(totalDolar.Value, 1);
	//totalDolar = Convert.ToInt32(totalDolar);
}
<img src="~/Images/logosintexto.png" style="text-align: left; width: 100px; height: 100px" class="img-rounded img-responsive" />
<h1 style="text-align:center">[[[Confirm your reservation request]]]</h1>

<body>
    <div class="panel panel-default" style="width: 70%; margin-left: 15%">
        <div class="panel-heading form-group">
            <div><label class="panel-title"> Cod Propiedad: @Model.ListingOrder.ListingID</label></div>
        </div>
        <div class="panel panel-body">
            <table class="table table-responsive">
                <tr>
                    <td>Desde:</td>
                    <td>Hasta: </td>
                    <td>Pasajeros:</td>
                    <td>Adultos:</td>
                    <td>Niños:</td>
                </tr>
                <tr>
                    <td>@Model.ListingOrder.FromDate.Value.ToShortDateString()</td>
                    <td>@Model.ListingOrder.ToDate.Value.ToShortDateString()</td>
                    <td>@pasajeros</td>
                    <td>@Model.ListingOrder.Adults.Value</td>
                    <td>@Model.ListingOrder.Children.Value</td>
                </tr>
            </table>
        </div>
        <div class="panel-body alert-info" style="text-align: center">
            <div class="panel form-inline">
                <table class="table">
                    <tr>
                        <td>
                            Arriendo <i class="glyphicon glyphicon-question-sign" data-toggle="tooltip" title="Precio"></i>:
                        </td>
                        <td>
                            CLP @string.Format("{0} {1:N0}", "$", Model.ListingOrder.Price)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Servicio <i class="glyphicon glyphicon-question-sign" data-toggle="tooltip" title="Servicio"></i>:
                        </td>
                        <td>
                            CLP @string.Format("{0} {1:N0}", "$", servicio)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Aseo<i class="glyphicon glyphicon-question-sign" data-toggle="tooltip" title="Aseo"></i>:
                        </td>
                        <td>
                            CLP @string.Format("{0} {1:N0}", "$",Model.ListingOrder.Listing.CleanlinessPrice)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Total <i class="glyphicon glyphicon-question-sign" data-toggle="tooltip" title="Total"></i>:
                        </td>
                        <td>
                            CLP @string.Format("{0} {1:N0}", "$", Model.ListingOrder.Total)
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="panel-body alert-link" style="text-align: center">
            <div class="panel-title form-inline">
                <div></div>
            </div>
        </div>
        <div class="panel-body alert-link" style="text-align: center">
            <div class="panel-title form-inline">
                <div><input class="checkbox" style="display:initial; margin-right: 10px" type="checkbox" onclick="ActivarBoton()" id="chkActivar" />Declaro y acepto las normas de la casa, capacidad máxima de pasajeros y las condiciones referidas al deposito de seguridad.</div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table">
                <tr>
                    <td class="text-center">
                        @using(Html.BeginForm("ConfirmOrderAction", "Payment", new { id = Model.ListingOrder.ID, niños = Model.ListingOrder.Children, adultos = Model.ListingOrder.Adults
                                }, FormMethod.Post, new { role = "form", id = "confirmForm", name = "confirmForm" }))
                        {
                            <div class=""><button class="btn btn-lg btn-success" type="submit" id="btnConfirm" disabled>Confirmar</button></div>
                        }
                    </td>
					@*<td class="text-center">
						<div id="paypal-button-container" disabled></div>
					</td>*@
                    <td class="text-center">
                        @using(Html.BeginForm("CancelOrderAction", "Payment", new { id = Model.ListingOrder.ID }, FormMethod.Post, new { role = "form", id = "cancelForm", name = "cancelForm" }))
                        {
                            <div class=""><button class="btn btn-lg btn-danger" type="submit">Cancelar</button></div>
                        }
                    </td>
                </tr>
            </table>
        </div>
    </div>

    @*<div id="pop-up" hidden>
            <h3>Pop-up div Successfully Displayed</h3>
            <p>
                This div only appears when the trigger link is hovered over.
                Otherwise it is hidden from view.
            </p>
        </div>*@
</body>

<script type="text/javascript">
    var actionButton = false;
    function ActivarBoton() {
    	if (chkActivar.checked) {    		
    		$('#btnConfirm').attr('disabled', false);
    		$('#paypal-button-container').attr('disabled', false);
        }
        else {
    		$('#btnConfirm').attr('disabled', true);
    		$('#paypal-button-container').attr('disabled', true);
        }
    }
    $('#confirmForm').submit(function (event) {
        actionButton = true;
        //event.preventDefault();
    });
    $('#cancelForm').submit(function (event) {
        actionButton = true;
        //event.preventDefault();
    });

    window.onbeforeunload = function () {
        if (!actionButton) {
            return "¿Estás seguro que deseas salir de la actual página?"
        }
    }
    window.onunload = function () {
        if (!actionButton) {
            $.post('@Url.Action("DeleteOrder", "Payment", new { id = Model.ListingOrder.ID })', function (data) {
                console.log(data);
            });
        }
    }
</script>
<script>
$(document).ready(function(){
    $('[data-toggle="tooltip"]').tooltip();
});
</script>
@*<script src="https://www.paypalobjects.com/api/checkout.js"></script>
<script>
    // Render the PayPal button
	paypal.Button.render({
		// Set your environment
		env: 'sandbox', // sandbox | production
		// PayPal Client IDs - replace with your own
		// Create a PayPal app: https://developer.paypal.com/developer/applications/create
		client: {
			sandbox: 'AVzOkXk4d6D_yMI3mqQZirbLNhvacvN9RyEQJ5bMPZKLNIqGdLLCIkAa9sLtua1TBd1rsF6bhkFXm8Yj',
			production: 'ASziCdDSVbNPopA4W0ToSZvpxHDKReAqk84n-wFtEH37ITgEDquwf0e9IBFbdCyg3Eb5ziV2LYPlaoOF'
		},
		// Set to 'Pay Now'
		commit: true,
		// Wait for the PayPal button to be clicked
		payment: function() {
			// Make a client-side call to the REST api to create the payment
			return paypal.rest.payment.create(this.props.env, this.props.client, {
				transactions: [
                    {
                    	amount: { total: '@totalDolar', currency: 'USD' }
                    }
				]
			});
		},
		// Wait for the payment to be authorized by the customer
		onAuthorize: function(data, actions) {

			// Execute the payment

			return actions.payment.execute().then(function() {
				$.post('@Url.Action("PayPalPayment", "Payment", new { id = Model.ListingOrder.ID })')
			});
		}
	}, '#paypal-button-container');
</script>*@