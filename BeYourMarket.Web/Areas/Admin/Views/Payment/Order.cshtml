@using GridMvc.Html
@using Microsoft.AspNet.Identity

@model BeYourMarket.Web.Models.OrderModel

@{
    ViewBag.Title = "[[[Orders]]]";
}
    
@section Styles {
    <link href="~/Content/Gridmvc.css" rel="stylesheet" />
    <link href="~/Content/gridmvc.datepicker.min.css" rel="stylesheet" />
}

@helper DisplayUpdateLink(int id, string userProvider, int status)
{
    // Show link only in pending state
    if (status == 1)
    {
            <a class="btn btn-success btn-sm m-b-5" href="javascript:void(0);" onclick="confirmOrderAction(@id, 2);"><i class="fa fa-thumbs-up"></i> [[[Accept]]]</a>
            <a class="btn btn-danger btn-sm m-b-5" href="javascript:void(0);" onclick="confirmOrderAction(@id, 3);"><i class="fa fa-remove"></i> [[[Cancel]]]</a>
    }
    if (status == 2)
    {
            <a class="btn btn-danger btn-sm m-b-5" href="javascript:void(0);" onclick="confirmOrderAction(@id, 3);"><i class="fa fa-remove"></i> [[[Cancel]]]</a>
    }
}

@helper DisplayStatus(int status)
{
    switch (status)
    {
        case 0:
        case 1:
            <span class="label label-info">[[[Pending]]]</span>
            break;
        case 2:
        <span class="label label-success">[[[Success]]]</span>
            break;
        case 3:
        <span class="label label-danger">[[[Cancelled]]]</span>
            break;

        default:
        @status
            break;
    }
}

@helper DisplayListing(string title, int ListingID)
{
    <a>@ListingID</a>
}

<div class="wraper container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">[[[Orders]]]</h3>                    
                </div>
                <div class="panel-body">
                    @Html.Partial("_UserMessage")

                    <div class="alert alert-info">
                        <p>[[[Here you can manage all the orders, you can cancel or accept orders on behalf of the users.]]]</p>
                    </div>

                    @using (Html.BeginForm("ProfileUpdate", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        <h4><i class="fa fa-shopping-cart"></i> [[[Orders]]]</h4>
                        <hr />
                    }
                    <div class="panel-default">
                        <a class="btn btn-primary btn-sm" style="margin-bottom: 15px" href="@Url.Action("ExportarOrders", "Manage", new { id = 1 })"><i class="fa fa-archive"></i> [[[Export to CSV]]]</a>
                    </div>
                    <div class="row">
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            @Html.Grid(Model.Grid).SetLanguage(Context.GetPrincipalAppLanguageForRequest().ToString()).EmptyText("[[[There are no items to display.]]]").Columns(columns =>
					   {
						   columns.Add()
							 .Encoded(false)
							 .Sanitized(false)
							 .RenderValueAs(x => DisplayUpdateLink(x.ID, x.UserProvider, x.Status));

						   columns.Add(x => x.Status).Titled("[[[Status]]]").RenderValueAs(x => x.Status == 1 ? "Pendiente" : "").Css("bg-info");

						   columns.Add(x => x.Listing.Title)
							   .Encoded(false)
							   .Sanitized(false)
							   .Titled("[[[ID Property]]]");

						   columns.Add(x => x.AspNetUserProvider.Email).Titled("[[[Owner]]]");
						   columns.Add(x => x.AspNetUserReceiver.Email).Titled("[[[Passenger]]]");

						   columns.Add(x => x.Total).Titled("[[[Value]]]");

						   columns.Add(x => x.FromDate).Titled("[[[From]]]").RenderValueAs(x => x.FromDate.Value.ToShortDateString());
						   columns.Add(x => x.ToDate).Titled("[[[To]]]").RenderValueAs(x => x.ToDate.Value.ToShortDateString());

						   columns.Add(x => x.Quantity).Titled("[[[Night]]]");

						   columns.Add(x => x.ID).Titled("[[[Order ID]]]");
						   
						   columns.Add(x => x.Created).Titled("[[[Created]]]").RenderValueAs(x => x.Created.ToString());


					   }).WithPaging(10).Sortable().Filterable().Selectable(false)
                        </div>
                    </div>

                </div>

            </div>
        </div>

    </div>
</div>

@section Scripts {
    <script src="~/Scripts/gridmvc.min.js"></script>
    @Html.Partial("_LocalizationGridMvc")

    <script type="text/javascript">
        function confirmOrderAction(id, status) {
            var message;
            var valorentero = 1;
            if (status == 2) {
              swal({
                    title: "Indicar Porcentaje (%) de abono!",
                    text: "Escribe el porcentaje de abono que pagara el pasajero",
                    type: "input",
                    showCancelButton: true,
                    closeOnConfirm: false,
                    animation: "slide-from-top",
                    inputPlaceholder: "EJ : 15"
                                },
                function (inputValue) {
                    if (inputValue === false) return false;
                    if (inputValue === "") {
                        swal.showInputError("No puede quedar en blanco");
                        return false;
                    }
                    if (isNaN(inputValue)) {
                        swal.showInputError("Escribir solo numeros!");
                        return false
                    }
                    var abono = inputValue;

                    swal({
                        title: "OT",
                        text: "Indicar Orden de trabajo!",
                        type: "input",
                        showCancelButton: true,
                        closeOnConfirm: false,
                        animation: "slide-from-top",
                        inputPlaceholder: "EJ : 5"
                    },
                    function (inputValue) {
                        if (inputValue === false) return false;
                        if (inputValue === "") {
                            swal.showInputError("No puede quedar en blanco");
                            return false;
                        }
                        if (isNaN(inputValue)) {
                            swal.showInputError("Escribir solo numeros!");
                            return false
                        }
                       
                        swal("Exelente!", "Tu OT: " + inputValue + ", porcentaje de abono : " + abono + " ", "success");

                        $.post('@Url.Action("OrderActionNewReserva", "Payment")', { id: id, status: status, ot: inputValue,percent: abono })
                          .done(function (data) {
                              if (data.Success) {
                                  location.reload();
                              } else {
                                  swal("[[[Failed]]]", data.Message, "error");
                              }
                          })
                    });
                });

            }
            if (status == 3) {

                  swal({
            title: "[[[Are you sure?]]]",
            text: "Cancelar Reserva",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "[[[Yes!]]]",
            cancelButtonText: "[[[No!]]]",
            closeOnConfirm: false,
            closeOnCancel: false
        }, function (isConfirm) {
            if (isConfirm) {
                swal.disableButtons();
            	$.post('@Url.Action("OrderActionNewReserva", "Payment")', { id: id, status: status, ot : 0, percent: 0 })
                .done(function (data) {
                	console.log('Entro');
                    if (data.Success) {
                        location.reload();
                    } else {
                        swal("[[[Failed]]]", data.Message, "error");
                    }
                })
                .fail(function (xhr, textStatus, errorThrown) {
                    swal("[[[Failed]]]", xhr.responseText, "error");
                })
            } else {
                swal("[[[Cancelled]]]", "", "error");
            }
        });

            }



    }
</script>
}
