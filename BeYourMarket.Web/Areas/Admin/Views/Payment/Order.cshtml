@using GridMvc.Html
@using Microsoft.AspNet.Identity

@model BeYourMarket.Web.Models.OrderModel

@{
    ViewBag.Title = "[[[Orders]]]";
}
    
@section Styles {
    <link href="~/Content/Gridmvc.css" rel="stylesheet" />
    <link href="~/Content/gridmvc.datepicker.min.css" rel="stylesheet" />
}

@helper DisplayUpdateLink(int id, string userProvider, int status)
{
    // Show link only in pending state
    if (status == 1)
    {
            <a class="btn btn-success btn-sm m-b-5" href="javascript:void(0);" onclick="confirmOrderAction(@id, 2);"><i class="fa fa-thumbs-up"></i> [[[Accept]]]</a>
            <a class="btn btn-danger btn-sm m-b-5" href="javascript:void(0);" onclick="confirmOrderAction(@id, 3);"><i class="fa fa-remove"></i> [[[Cancel]]]</a>
    }
    if (status == 2)
    {
            <a class="btn btn-danger btn-sm m-b-5" href="javascript:void(0);" onclick="confirmOrderAction(@id, 3);"><i class="fa fa-remove"></i> [[[Cancel]]]</a>
    }
}

@helper DisplayStatus(int status)
{
    switch (status)
    {
        case 0:
        case 1:
            <span class="label label-info">[[[Pending]]]</span>
            break;
        case 2:
        <span class="label label-success">[[[Success]]]</span>
            break;
        case 3:
        <span class="label label-danger">[[[Cancelled]]]</span>
            break;

        default:
        @status
            break;
    }
}

@helper DisplayListing(string title, int ListingID)
{
    <a>@ListingID</a>
}

<div class="wraper container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">[[[Orders]]]</h3>                    
                </div>
                <div class="panel-body">
                    @Html.Partial("_UserMessage")

                    <div class="alert alert-info">
                        <p>[[[Here you can manage all the orders, you can cancel or accept orders on behalf of the users.]]]</p>
                    </div>

                    @using (Html.BeginForm("ProfileUpdate", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        <h4><i class="fa fa-shopping-cart"></i> [[[Orders]]]</h4>
                        <hr />
                    }
                    <a href="#" id="linkexcel" onClick="boton();">GENERAR EXCEL</a>
                    <div class="row">
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            @Html.Grid(Model.Grid).SetLanguage(Context.GetPrincipalAppLanguageForRequest().ToString()).EmptyText("[[[There are no items to display.]]]").Columns(columns =>
                       {
                           columns.Add()
                             .Encoded(false)
                             .Sanitized(false)
                             .RenderValueAs(x => DisplayUpdateLink(x.ID, x.UserProvider, x.Status));

                           columns.Add(x => x.Status).Titled("[[[Status]]]").RenderValueAs(x => x.Status == 1 ? "Pendiente" : "").Css("bg-info");

                           columns.Add(x => x.Listing.Title)
                               .Encoded(false)
                               .Sanitized(false)
                               .Titled("[[[ID Property]]]");

                           columns.Add(x => x.AspNetUserProvider.Email).Titled("[[[Owner]]]");
                           columns.Add(x => x.AspNetUserReceiver.Email).Titled("[[[Passenger]]]");

                           columns.Add(x => x.Total).Titled("[[[Value]]]");

                           columns.Add(x => x.FromDate).Titled("[[[From]]]").RenderValueAs(x => x.FromDate.Value.ToShortDateString());
                           columns.Add(x => x.ToDate).Titled("[[[To]]]").RenderValueAs(x => x.ToDate.Value.ToShortDateString());

                           columns.Add(x => x.Quantity).Titled("[[[Night]]]");

                           columns.Add(x => x.ID).Titled("[[[Order ID]]]");

                           columns.Add(x => x.Created).Titled("[[[Created]]]").RenderValueAs(x => x.Created.ToShortDateString());


                       }).WithPaging(10).Sortable().Filterable().Selectable(false)
                        </div>
                    </div>

                </div>

            </div>
        </div>

    </div>
</div>

@section Scripts {
    <script src="~/Scripts/gridmvc.min.js"></script>
    @Html.Partial("_LocalizationGridMvc")

    <script type="text/javascript">
        function confirmOrderAction(id, status) {
            var message;
            var valorentero = 1;
            if (status == 2) {
              swal({
                    title: "Indicar Porcentaje (%) de abono!",
                    text: "Escribe el porcentaje de abono que pagara el pasajero",
                    type: "input",
                    showCancelButton: true,
                    closeOnConfirm: false,
                    animation: "slide-from-top",
                    inputPlaceholder: "EJ : 15"
                                },
                function (inputValue) {
                    if (inputValue === false) return false;
                    if (inputValue === "") {
                        swal.showInputError("No puede quedar en blanco");
                        return false;
                    }
                    if (isNaN(inputValue)) {
                        swal.showInputError("Escribir solo numeros!");
                        return false
                    }
                    var abono = inputValue;

                    swal({
                        title: "OT",
                        text: "Indicar Orden de trabajo!",
                        type: "input",
                        showCancelButton: true,
                        closeOnConfirm: false,
                        animation: "slide-from-top",
                        inputPlaceholder: "EJ : 5"
                    },
                    function (inputValue) {
                        if (inputValue === false) return false;
                        if (inputValue === "") {
                            swal.showInputError("No puede quedar en blanco");
                            return false;
                        }
                        if (isNaN(inputValue)) {
                            swal.showInputError("Escribir solo numeros!");
                            return false
                        }
                       
                        swal("Exelente!", "Tu OT: " + inputValue + ", porcentaje de abono : " + abono + " ", "success");

                        $.post('@Url.Action("OrderActionNewReserva", "Payment")', { id: id, status: status, ot: inputValue,percent: abono })
                          .done(function (data) {
                              if (data.Success) {
                                  location.reload();
                              } else {
                                  swal("[[[Failed]]]", data.Message, "error");
                              }
                          })
                    });
                });

            }
            if (status == 3) {

                  swal({
            title: "[[[Are you sure?]]]",
            text: "Cancelar Reserva",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "[[[Yes!]]]",
            cancelButtonText: "[[[No!]]]",
            closeOnConfirm: false,
            closeOnCancel: false
        }, function (isConfirm) {
            if (isConfirm) {
                swal.disableButtons();
                $.post('@Url.Action("OrderActionNewReserva", "Payment")', { id: id, status: status, percent: '0' })
                .done(function (data) {
                    if (data.Success) {
                        location.reload();
                    } else {
                        swal("[[[Failed]]]", data.Message, "error");
                    }
                })
                .fail(function (xhr, textStatus, errorThrown) {
                    swal("[[[Failed]]]", xhr.responseText, "error");
                })
            } else {
                swal("[[[Cancelled]]]", "", "error");
            }
        });

            }



    }
</script>


<script>
    (function ($) {

        $.fn.tableExport = function (options) {

            var settings = $.extend({}, $.fn.tableExport.defaults, options),
                colDelim = '"' + settings.separator + '"',      // user-defined separator (default is ",")
                rowDelim = '"\r\n"',                            // Windows new line character
                spacing = settings.spacing ? "btn-toolbar" : "",
                eventEl = "." + settings.defaultClass;

            return [this.each(function () {
                var $el = $(this),
                    $rows = settings.headings ? $el.find('tr') : $el.find('tr:has(td)'),

                    data = '"' + $rows.map(function (i, val) {
                        var $cols = $(val).find('th, td');
                        return $cols.map(function (i, val) {
                            return $(val).text().replace(/"/g, '""')
                        }).get().join(colDelim);
                    }).get().join(rowDelim) + '"',

                    data2 = $rows.map(function (i, val) {
                        var $cols = $(val).find('th, td');
                        return $cols.map(function (i, val) {
                            return $(val).text()
                        });
                    }).get(),

                    dataType = "#",
                    dataObject = "",
                    fileName = settings.fileName,
                    $caption = $el.find('caption:not(.head)');

                switch (fileName) {
                    case "id":
                        fileName = $el.attr('id');
                        break;
                    case "name":
                        fileName = $el.data('name');
                        break;
                }

                switch (settings.type) {
                    case "xlsx":
                        dataObject = JSON.stringify({
                            data: data2,
                            name: fileName
                        });
                        break;
                    case "csv":
                    default:
                        dataType = 'data:text/csv;charset=utf-8,' + encodeURIComponent(data);
                        fileName += ".csv";
                        break;
                    case "txt":
                        data = $.fn.tableExport.txtFormat(data, settings.stripQuotes);
                        dataType = 'data:text/plain;charset=utf-8,' + encodeURIComponent(data);
                        fileName += ".txt";
                        break;
                }

                var exportButton = "<a id='Exportar' href='" + dataType + "' data-obj='" + dataObject + "' download='" + fileName + "' role='button' class='" + settings.defaultClass + " " + settings.defaultTheme + " " + settings.addClass + "'>" + settings.buttonContent + "</a>";

                $caption.length ? $caption.append(exportButton) : $el.prepend('<caption class="' + spacing + ' ' + settings.position + '">' + exportButton + '</caption>');

            }), $.fn.tableExport.addEvent(eventEl)];
        };

        // Define the plugin default properties.
        $.fn.tableExport.defaults = {
            separator: ";",                         // [String] column separator, [default: ","]
            headings: true,                         // [Boolean], display table headings (th elements) in the first row, [default: true]
            buttonContent: "Guardar Excel...",                // [String], text/html to display in the export button, [default: "Export file"]
            addClass: "",                           // [String], additional button classes to add, [default: ""]
            defaultClass: "btn",                    // [String], the default button class, [default: "btn"]
            defaultTheme: "btn-warning",            // [String], the default button theme, [default: "btn-default"]
            type: "csv",                            // [xlsx, csv, txt], type of file, [default: "csv"]
            fileName: "Ordenes pendientes Playamoblados",                     // [id, name, String], filename for the downloaded file, [default: "export"]
            position: "bottom",                     // [top, bottom], position of the caption element relative to table, [default: "bottom"]
            spacing: true,                          // [Boolean], display spacing between buttons, [default: true]
            stripQuotes: true                       // [Boolean], remove containing double quotes (.txt files ONLY), [default: true]
        };

        // Define the format for .txt files.
        $.fn.tableExport.txtFormat = function (txt, strip) {
            if (strip) {
                return txt.replace(/"(?!")/g, '');
            }    // strips surrounding double quotes
            return txt.replace(/""/g, '"');
        };

        // Define the event listener for the export button.
        $.fn.tableExport.addEvent = function (el) {
            return [$(el).off('click'), $(el).on("click", function (e) {
                if ($(this).data("obj")) {
                    e.preventDefault();
                    var object = $(this).data("obj"),
                        data2 = object.data,
                        fileName = object.name;
                    export2xlsx(data2, fileName);
                }
            })];
        }

    }(jQuery));



     function boton()
     {
         $('table').tableExport({ type: 'scv', escape: 'false' });
         $('#linkexcel').hide();
     }
</script>
}
