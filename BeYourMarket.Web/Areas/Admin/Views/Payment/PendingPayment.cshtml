@using GridMvc.Html

@model BeYourMarket.Web.Models.OrderModel

@{
	ViewBag.Title = "PendingPayment";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
	<link href="~/Content/Gridmvc.css" rel="stylesheet" />
	<link href="~/Content/gridmvc.datepicker.min.css" rel="stylesheet" />
}

@helper DisplayUpdateLink(int id, string userProvider, int status)
{
// Show link only in pending state
if (status == 2)
{
		<a class="btn btn-success btn-sm m-b-5" href="javascript:void(0);" onclick="confirmOrderAction(@id, 4);"><i class="fa fa-thumbs-up"></i> [[[Accept]]]</a>
		<a class="btn btn-danger btn-sm m-b-5" href="javascript:void(0);" onclick="confirmOrderAction(@id, 3);"><i class="fa fa-remove"></i> [[[Cancel]]]</a>
	}
}

@helper DisplayStatus(int status)
{
switch (status)
{
	case 0:
	case 1:
			<span class="label label-info">[[[Pending]]]</span>
		break;
	case 2:
			<span class="label label-success">[[[Pending Pay]]]</span>
		break;
	case 3:
			<span class="label label-danger">[[[Cancelled]]]</span>
		break;

	default:
			@status
		break;
}
}

@helper DisplayListing(string title, int ListingID)
{
	<a>@ListingID</a>

}

<div class="wraper container-fluid">
	<div class="row">
		<div class="col-md-12">
			<div class="panel panel-default">
				<div class="panel-heading">
					<h3 class="panel-title">[[[Pending Payments]]]</h3>
				</div>

				<div class="panel-body">
					<div class="alert alert-info">
						<p>[[[Here you can view all the transactions. Transactions is supported only when payment plugin is installed and payment method is configured.]]]</p>
					</div>


					@using (Html.BeginForm("ProfileUpdate", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
					{
						@Html.AntiForgeryToken()
						<h4><i class="fa fa-shopping-cart"></i> [[[Pending Payments]]]</h4>
						<hr />

					}
                    <a href="#" id="linkexcel" onClick="boton();">GENERAR EXCEL</a>
					<div class="row">
						<div class="col-md-12 col-sm-12 col-xs-12">
							@Html.Grid(Model.Grid).SetLanguage(Context.GetPrincipalAppLanguageForRequest().ToString()).EmptyText("[[[There are no items to display.]]]").Columns(columns =>
                       {
                           columns.Add()
                                .Encoded(false)
                                .Sanitized(false)
                                .RenderValueAs(x => DisplayUpdateLink(x.ID, x.UserProvider, x.Status));

                           columns.Add(x => x.Status)
                               .Encoded(false)
                               .Sanitized(false)
                               .Titled("[[[Status]]]").RenderValueAs(x => DisplayStatus(x.Status));

                           columns.Add(x => x.Listing.Title)
                              .Encoded(false)
                              .Sanitized(false)
                              .Titled("[[[ID Property]]]");

                           columns.Add(x => x.AspNetUserProvider.Email).Titled("[[[Owner]]]");
                           columns.Add(x => x.AspNetUserReceiver.Email).Titled("[[[Passenger]]]");

                           columns.Add(x => x.Total).Titled("[[[Value]]]");

                           columns.Add(x => x.FromDate).Titled("[[[From]]]").RenderValueAs(x => x.FromDate.Value.ToShortDateString());
                           columns.Add(x => x.ToDate).Titled("[[[To]]]").RenderValueAs(x => x.ToDate.Value.ToShortDateString());

                           columns.Add(x => x.Quantity).Titled("[[[Night]]]");

                           columns.Add(x => x.ID).Titled("[[[Order ID]]]");

                           columns.Add(x => x.Created).Titled("[[[Created]]]").RenderValueAs(x => x.Created.ToShortDateString());


                       }).WithPaging(10).Sortable().Filterable().Selectable(false)
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script src="~/Scripts/gridmvc.min.js"></script>
	@Html.Partial("_LocalizationGridMvc")

	<script type="text/javascript">
	function confirmOrderAction(id, status) {
	    var message;
	    var valorentero = 1;
	    console.log(status);

	    if(status==4)
	    {
	              swal({
              title: "Confirmar pago?",
              text: "Al confirmar pago no podra volver a revertir los cambios",
              type: "success",
              showCancelButton: true,
              confirmButtonClass: "btn-success",
              confirmButtonText: "Confirmar",
              closeOnConfirm: false
            },
            function(){
                swal("Confirmado.", "success");
                $.post('@Url.Action("OrderActionNew", "Payment")', { id: id, status: status })
                location.reload();
            });
	    }

	    if(status==3)
	    {
	        swal({
	            title: "[[[Are you sure?]]]",
	            text: "Cancelar Reserva",
	            type: "warning",
	            showCancelButton: true,
	            confirmButtonColor: "#DD6B55",
	            confirmButtonText: "[[[Yes!]]]",
	            cancelButtonText: "[[[No!]]]",
	            closeOnConfirm: false,
	            closeOnCancel: false
	        }, function (isConfirm) {
	            if (isConfirm) {
	                swal.disableButtons();
	                $.post('@Url.Action("OrderActionNew", "Payment")', { id: id, status: status, ot: '0' })
                    .done(function (data) {
                        if (data.Success) {
                            location.reload();
                        } else {
                            swal("[[[Failed]]]", data.Message, "error");
                        }
                    })
                    .fail(function (xhr, textStatus, errorThrown) {
                        swal("[[[Failed]]]", xhr.responseText, "error");
                    })
	            } else {
	                swal("[[[Cancelled]]]", "", "error");
	            }
	        });
	    }

	}




	</script>


<script>
    (function ($) {

        $.fn.tableExport = function (options) {

            var settings = $.extend({}, $.fn.tableExport.defaults, options),
                colDelim = '"' + settings.separator + '"',      // user-defined separator (default is ",")
                rowDelim = '"\r\n"',                            // Windows new line character
                spacing = settings.spacing ? "btn-toolbar" : "",
                eventEl = "." + settings.defaultClass;

            return [this.each(function () {
                var $el = $(this),
                    $rows = settings.headings ? $el.find('tr') : $el.find('tr:has(td)'),

                    data = '"' + $rows.map(function (i, val) {
                        var $cols = $(val).find('th, td');
                        return $cols.map(function (i, val) {
                            return $(val).text().replace(/"/g, '""')
                        }).get().join(colDelim);
                    }).get().join(rowDelim) + '"',

                    data2 = $rows.map(function (i, val) {
                        var $cols = $(val).find('th, td');
                        return $cols.map(function (i, val) {
                            return $(val).text()
                        });
                    }).get(),

                    dataType = "#",
                    dataObject = "",
                    fileName = settings.fileName,
                    $caption = $el.find('caption:not(.head)');

                switch (fileName) {
                    case "id":
                        fileName = $el.attr('id');
                        break;
                    case "name":
                        fileName = $el.data('name');
                        break;
                }

                switch (settings.type) {
                    case "xlsx":
                        dataObject = JSON.stringify({
                            data: data2,
                            name: fileName
                        });
                        break;
                    case "csv":
                    default:
                        dataType = 'data:text/csv;charset=utf-8,' + encodeURIComponent(data);
                        fileName += ".csv";
                        break;
                    case "txt":
                        data = $.fn.tableExport.txtFormat(data, settings.stripQuotes);
                        dataType = 'data:text/plain;charset=utf-8,' + encodeURIComponent(data);
                        fileName += ".txt";
                        break;
                }

                var exportButton = "<a id='Exportar' href='" + dataType + "' data-obj='" + dataObject + "' download='" + fileName + "' role='button' class='" + settings.defaultClass + " " + settings.defaultTheme + " " + settings.addClass + "'>" + settings.buttonContent + "</a>";

                $caption.length ? $caption.append(exportButton) : $el.prepend('<caption class="' + spacing + ' ' + settings.position + '">' + exportButton + '</caption>');

            }), $.fn.tableExport.addEvent(eventEl)];
        };

        // Define the plugin default properties.
        $.fn.tableExport.defaults = {
            separator: ";",                         // [String] column separator, [default: ","]
            headings: true,                         // [Boolean], display table headings (th elements) in the first row, [default: true]
            buttonContent: "Guardar Excel...",                // [String], text/html to display in the export button, [default: "Export file"]
            addClass: "",                           // [String], additional button classes to add, [default: ""]
            defaultClass: "btn",                    // [String], the default button class, [default: "btn"]
            defaultTheme: "btn-warning",            // [String], the default button theme, [default: "btn-default"]
            type: "csv",                            // [xlsx, csv, txt], type of file, [default: "csv"]
            fileName: "Pagos pendientes Playamoblados",                     // [id, name, String], filename for the downloaded file, [default: "export"]
            position: "bottom",                     // [top, bottom], position of the caption element relative to table, [default: "bottom"]
            spacing: true,                          // [Boolean], display spacing between buttons, [default: true]
            stripQuotes: true                       // [Boolean], remove containing double quotes (.txt files ONLY), [default: true]
        };

        // Define the format for .txt files.
        $.fn.tableExport.txtFormat = function (txt, strip) {
            if (strip) {
                return txt.replace(/"(?!")/g, '');
            }    // strips surrounding double quotes
            return txt.replace(/""/g, '"');
        };

        // Define the event listener for the export button.
        $.fn.tableExport.addEvent = function (el) {
            return [$(el).off('click'), $(el).on("click", function (e) {
                if ($(this).data("obj")) {
                    e.preventDefault();
                    var object = $(this).data("obj"),
                        data2 = object.data,
                        fileName = object.name;
                    export2xlsx(data2, fileName);
                }
            })];
        }

    }(jQuery));



     function boton()
     {
         $('table').tableExport({ type: 'scv', escape: 'false' });
         $('#linkexcel').hide();
     }
</script>
}






